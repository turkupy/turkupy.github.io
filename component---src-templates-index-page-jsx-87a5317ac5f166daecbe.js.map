{"version":3,"sources":["webpack:///./src/utils/utils.js","webpack:///./src/components/IndexPage.jsx","webpack:///./src/templates/IndexPage.jsx","webpack:///./src/components/Event.jsx","webpack:///./src/components/Events.jsx"],"names":["formatDate","dateString","date","Date","getDate","getMonth","getFullYear","getLangCode","slug","regexedLangCode","match","IndexPage","events","langCode","pastEvents","eventsLink","getTranslation","length","Events","to","pageQuery","Index","data","pathname","location","siteTitle","site","siteMetadata","title","edges","Layout","EventCard","styled","article","colors","darkPink","darkGrey","borderRadius","medium","lightPink","white","EventTitle","h3","small","DateSpan","span","EventInfo","div","StyledLink","Link","Event","host","EventContainer","ul","map","event","key","node","frontmatter","fields"],"mappings":"6FAAA,oEAAO,IAAMA,EAAa,SAAAC,GACxB,IAAMC,EAAO,IAAIC,KAAKF,GACtB,OAAUC,EAAKE,UAAf,KAA4BF,EAAKG,WAAa,GAA9C,IAAmDH,EAAKI,eAG7CC,EAAc,SAAAC,GACzB,IACMC,EAAkBD,EAAKE,MADf,wBAGd,OAAOD,EAAkBA,EAAgB,GAAK,O,0KCgDjCE,EAtCG,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAE/BC,EAAyB,MAAZF,EAAmB,UAAnB,IAAmCA,EAAnC,UACnB,OACE,oCACE,4BAAKG,YAAeH,EAAU,oBAC9B,4BAAKG,YAAeH,EAAU,uBAC9B,2BAAIG,YAAeH,EAAU,uBAC7B,4BAAKG,YAAeH,EAAU,8BAE7BD,EAAOK,OACN,kBAACC,EAAA,EAAD,CAAQN,OAAQA,IAEhB,6BAAMI,YAAeH,EAAU,iCAEjC,4BAAKG,YAAeH,EAAU,0BAC9B,kBAACK,EAAA,EAAD,CAAQN,OAAQE,IAChB,kBAAC,OAAD,CAAMK,GAAIJ,GACPC,YAAeH,EAAU,iC,YCNrBO,GAFEC,UArBD,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KACPC,EAD4B,EAAfC,SACbD,SACFV,EAAWN,YAAYgB,GACvBE,EAAYH,EAAKI,KAAKC,aAAaC,MACnChB,EAASU,EAAKV,OAAOiB,MACrBf,EAAaQ,EAAKR,WAAWe,MAGnC,OACE,kBAACC,EAAA,EAAD,CAAQjB,SAAUA,EAAUe,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAOH,IACZ,kBAAC,EAAD,CAAWb,OAAQA,EAAQE,WAAYA,EAAYD,SAAUA,MAY7C,e,2GCxBhBkB,EAAYC,IAAOC,QAAV,uEAAGD,CAAH,sVAKWE,IAAOC,SACtBD,IAAOE,SAGCC,IAAaC,OAKLJ,IAAOK,UACVL,IAAOM,MAKlBN,IAAOE,UAQdK,EAAaT,IAAOU,GAAV,wEAAGV,CAAH,kVAKGK,IAAaM,MAEDT,IAAOK,UAQzBL,IAAOE,SAIPF,IAAOE,SACeF,IAAOK,UASPL,IAAOK,WAIpCK,EAAWZ,IAAOa,KAAV,sEAAGb,CAAH,qDAKRc,EAAYd,IAAOe,IAAV,uEAAGf,CAAH,yCAKTgB,EAAahB,YAAOiB,QAAV,wEAAGjB,CAAH,0EAgCDkB,EArBD,SAAC,GAAiC,IAA/BtB,EAA8B,EAA9BA,MAAO1B,EAAuB,EAAvBA,KAAMiD,EAAiB,EAAjBA,KAAM3C,EAAW,EAAXA,KAClC,OACE,kBAACuB,EAAD,KACE,kBAACU,EAAD,KACE,kBAACO,EAAD,CAAY7B,GAAIX,GAAOoB,EAAvB,MAEF,kBAACkB,EAAD,KACG5C,GAAQ,kBAAC0C,EAAD,cAAiB5C,YAAWE,IACpCiD,GAAQ,wCAAcA,MC5FzBC,EAAiBpB,IAAOqB,GAAV,yEAAGrB,CAAH,yKAgCLd,IArBA,SAAC,GAAgB,IAAdN,EAAa,EAAbA,OAChB,OACE,kBAACwC,EAAD,KACGxC,EAAO0C,KAAI,SAAAC,GAAK,OACf,wBAAIC,IAAKD,EAAME,KAAKC,YAAY9B,OAC9B,kBAAC,EAAD,CACEA,MAAO2B,EAAME,KAAKC,YAAY9B,MAC9B1B,KAAMqD,EAAME,KAAKC,YAAYxD,KAC7BiD,KAAMI,EAAME,KAAKC,YAAYP,KAC7B3C,KAAM+C,EAAME,KAAKE,OAAOnD","file":"component---src-templates-index-page-jsx-87a5317ac5f166daecbe.js","sourcesContent":["export const formatDate = dateString => {\n  const date = new Date(dateString)\n  return `${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()}`\n}\n\nexport const getLangCode = slug => {\n  const regex = /(\\bfi)|(\\ben)|(\\bsv)/\n  const regexedLangCode = slug.match(regex)\n  // Default to en if lang code is not found\n  return regexedLangCode ? regexedLangCode[0] : \"en\"\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n//import Bio from \"./Bio\"\nimport { getTranslation } from \"../utils/translations/helpers\"\nimport Events from \"./Events\"\nimport { Link } from \"gatsby\"\n\n/*\nconst OrganizerContainer = styled.div`\n  display: grid;\n  grid-template-columns: 33% 33% 33%;\n  column-gap: 1em;\n  row-gap: 1em;\n  @media (max-width: 650px) {\n    grid-template-columns: 100%;\n  }\n`\n*/\n\nconst IndexPage = ({ events, langCode, pastEvents }) => {\n  // const organizers = data.organizers.edges <-- This has to be added as props when we'll add it\n  const eventsLink = langCode == \"en\" ? \"/events\" : `/${langCode}/events`\n  return (\n    <>\n      <h1>{getTranslation(langCode, \"frontpage.title\")}</h1>\n      <h2>{getTranslation(langCode, \"frontpage.preamble\")}</h2>\n      <p>{getTranslation(langCode, \"frontpage.infotext\")}</p>\n      <h2>{getTranslation(langCode, \"frontpage.upcoming-events\")}</h2>\n\n      {events.length ? (\n        <Events events={events} />\n      ) : (\n        <div>{getTranslation(langCode, \"frontpage.no-upcoming-events\")}</div>\n      )}\n      <h2>{getTranslation(langCode, \"frontpage.past-events\")}</h2>\n      <Events events={pastEvents} />\n      <Link to={eventsLink}>\n        {getTranslation(langCode, \"frontpage.more-past-events\")}\n      </Link>\n      {/* TODO implement this */}\n      {/* <OrganizerContainer>\n        {organizers.map(organizer => <Bio\n          key={organizer.node.frontmatter.github}\n          name={organizer.node.frontmatter.name}\n          github={organizer.node.frontmatter.github}\n        />)}\n      </OrganizerContainer> */}\n    </>\n  )\n}\n\nIndexPage.propTypes = {\n  events: PropTypes.any,\n  langCode: PropTypes.string,\n  pastEvents: PropTypes.any,\n}\n\nexport default IndexPage\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/Seo\"\nimport IndexPage from \"../components/IndexPage\"\nimport { getLangCode } from \"../utils/utils\"\n\nconst Index = ({ data, location }) => {\n  const { pathname } = location\n  const langCode = getLangCode(pathname)\n  const siteTitle = data.site.siteMetadata.title\n  const events = data.events.edges\n  const pastEvents = data.pastEvents.edges\n  // const organizers = data.organizers.edges\n\n  return (\n    <Layout langCode={langCode} title={siteTitle}>\n      <SEO title={siteTitle} />\n      <IndexPage events={events} pastEvents={pastEvents} langCode={langCode} />\n    </Layout>\n  )\n}\n\nIndex.propTypes = {\n  data: PropTypes.any,\n  location: PropTypes.any,\n}\n\nexport default Index\n\nexport const pageQuery = graphql`\n  query IndexPageQuery($langCode: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    events: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: {\n          type: { eq: \"event\" }\n          lang: { eq: $langCode }\n          date: { gte: \"now()\" }\n        }\n      }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            host\n            date\n            speakers\n            lang\n          }\n        }\n      }\n    }\n    pastEvents: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: {\n          type: { eq: \"event\" }\n          lang: { eq: $langCode }\n          date: { lte: \"now()\" }\n        }\n      }\n      limit: 4\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            host\n            date\n            speakers\n            lang\n          }\n        }\n      }\n    }\n    organizers: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { type: { eq: \"organizer\" } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            name\n            github\n          }\n          html\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport { colors, borderRadius } from \"../utils/styles\"\nimport { formatDate } from \"../utils/utils\"\n\nconst EventCard = styled.article`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 1.2em;\n  border: 0.5rem dashed ${colors.darkPink};\n  color: ${colors.darkGrey};\n  line-height: 2rem;\n  min-height: 13em;\n  border-radius: ${borderRadius.medium};\n  position: relative;\n  &:hover,\n  &:focus-within {\n    cursor: pointer;\n    border: 0.5rem solid ${colors.lightPink};\n    background-color: ${colors.white};\n    transform: rotate(0.8deg);\n  }\n\n  &:hover a {\n    color: ${colors.darkGrey};\n  }\n\n  &:focus a {\n    outline: none;\n  }\n`\n\nconst EventTitle = styled.h3`\n  margin-top: 0.8em;\n  color: inherit;\n  box-sizing: border-box;\n  padding: 0.25em;\n  border-radius: ${borderRadius.small};\n  &:focus-within {\n    box-shadow: 0 0 0 0.25em ${colors.lightPink};\n  }\n\n  &:focus-within:hover {\n    box-shadow: none;\n  }\n\n  & > a {\n    color: ${colors.darkGrey};\n  }\n\n  & > a:hover {\n    color: ${colors.darkGrey};\n    border-bottom: 0.25rem solid ${colors.lightPink};\n  }\n\n  & > a:focus {\n    outline: none;\n  }\n\n  & > a:hover:focus {\n    box-shadow: none;\n    border-bottom: 0.25rem solid ${colors.lightPink};\n  }\n`\n\nconst DateSpan = styled.span`\n  text-transform: uppercase;\n  box-sizing: border-box;\n`\n\nconst EventInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst StyledLink = styled(Link)`\n  &:after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n`\n\nconst Event = ({ title, date, host, slug }) => {\n  return (\n    <EventCard>\n      <EventTitle>\n        <StyledLink to={slug}>{title} </StyledLink>\n      </EventTitle>\n      <EventInfo>\n        {date && <DateSpan>Date: {formatDate(date)}</DateSpan>}\n        {host && <p>Hosted by {host}</p>}\n      </EventInfo>\n    </EventCard>\n  )\n}\n\nEvent.propTypes = {\n  title: PropTypes.string.isRequired,\n  host: PropTypes.string,\n  slug: PropTypes.string.isRequired,\n  date: PropTypes.string,\n}\n\nexport default Event\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"styled-components\"\nimport Event from \"./Event\"\n\nconst EventContainer = styled.ul`\n  margin: 0 auto;\n  list-style-type: none;\n  display: grid;\n  grid-gap: 1rem;\n\n  @supports (width: min(2rem, 100%)) {\n    grid-template-columns: repeat(auto-fit, minmax(min(20rem, 100%), 1fr));\n  }\n`\n\nconst Events = ({ events }) => {\n  return (\n    <EventContainer>\n      {events.map(event => (\n        <li key={event.node.frontmatter.title}>\n          <Event\n            title={event.node.frontmatter.title}\n            date={event.node.frontmatter.date}\n            host={event.node.frontmatter.host}\n            slug={event.node.fields.slug}\n          />\n        </li>\n      ))}\n    </EventContainer>\n  )\n}\n\nEvents.propTypes = {\n  events: PropTypes.any,\n}\n\nexport default Events\n"],"sourceRoot":""}